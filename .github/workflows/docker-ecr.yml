name: Build and Push Docker Image to ECR

on:
  push:
    branches:
      - dev
      - test
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Main Code
      uses: actions/checkout@v3

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan github.com >> ~/.ssh/known_hosts

    - name: Clone Infraestructura Repo
      run: git clone git@github.com:NOV-2024-DEVOPS/infraestructura.git

    - name: Load Variables from Organization Secrets
      run: |
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> $GITHUB_ENV
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> $GITHUB_ENV
        echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> $GITHUB_ENV
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
        echo "ECR_REPOSITORY=${{ secrets.ECR_REPOSITORY }}" >> $GITHUB_ENV
        
        # Configurar valores segÃºn la rama
        if [ "${{ github.ref_name }}" == "dev" ]; then
          echo "IMAGE_TAG=terraform-dev-repo:shipping-service-latest" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" == "test" ]; then
          echo "IMAGE_TAG=terraform-test-repo:shipping-service-latest" >> $GITHUB_ENV
        elif [ "${{ github.ref_name }}" == "main" ]; then
          echo "IMAGE_TAG=terraform-main-repo:shipping-service-latest" >> $GITHUB_ENV
        fi

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # Build the application
    - name: Build the application
      run: mvn clean package -DskipTests

    # Run the application locally
    - name: Start Application Locally
      run: |
        nohup java -jar target/shipping-service-example-0.0.1-SNAPSHOT.jar --server.port=8081 > app.log 2>&1 &
        sleep 10 # Wait for the application to start

    # Run Postman tests using Newman
    - name: Run Functional Tests with Newman
      run: |
        newman run "collection.json" \
          --environment environment.json \
          --delay-request 100 \
          --reporters cli,html \
          --reporter-html-export newman-report.html

    # SonarCloud Analysis
    - name: Cache SonarCloud analysis tools
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Analyze with SonarCloud
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=NOV-2024-DEVOPS_shipping-service -Dsonar.organization=nov-2024-devops -Dsonar.host.url=https://sonarcloud.io


    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, Tag, and Push Docker Image
      env:
        ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
      run: |
        docker build -t $IMAGE_TAG .
        docker tag $IMAGE_TAG $ECR_REPOSITORY/$IMAGE_TAG
        docker push $ECR_REPOSITORY/$IMAGE_TAG
